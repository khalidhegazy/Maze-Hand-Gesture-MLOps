# ────────────────────────────────────────────────────────
# CI + CD: Test → Build → Push to Docker Hub → Deploy to Railway
# ────────────────────────────────────────────────────────
name: CI-CD | Build & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# ────────────────────────────────────────────────────────
# Global environment variables for the workflow
# ────────────────────────────────────────────────────────
env:
  # Docker image repository name on Docker Hub
  # DOCKERHUB_USERNAME is a GitHub Secret, injected dynamically
  DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/hand-gesture-api 

  # Railway deployment variables (configured as GitHub Repository Variables)
  RAILWAY_PROJECT: ${{ vars.RAILWAY_PROJECT_ID }}   # Your Railway Project ID
  RAILWAY_SERVICE: ${{ vars.RAILWAY_SERVICE_NAME }} # Your Railway Service Name (e.g., 'hand-gesture-api-service')

  # Toggle: 'true'  ➜ Skips deployment, only builds and pushes Docker image
  #          'false' ➜ Performs full deployment to Railway
  DRY_RUN:           ${{ vars.DRY_RUN || 'true' }} # Defaults to 'true' if not set in Repository Variables

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest # Uses the latest Ubuntu runner
    permissions:
      contents: read # Required to checkout the repository code
      id-token: write # Required for OIDC authentication if you were using GCP, generally good to have

    steps:
    # ────────────────────────────────
    # 1. Check out the repository code
    # ────────────────────────────────
    - name: Checkout repository
      uses: actions/checkout@v4

    # ────────────────────────────────
    # 2. Python setup and dependency installation
    # ────────────────────────────────
    - name: Set up Python & Install dependencies
      uses: actions/setup-python@v5
      with:
        python-version: "3.10" # Ensure this matches your project's Python version

    - name: Install Python dependencies & Run tests
      run: |
        python -m pip install --quiet --upgrade pip # Upgrade pip
        pip install -q -r requirements.txt # Install packages from requirements.txt
        python -m pytest tests/ # Run unit tests located in the 'tests/' directory

    # ────────────────────────────────
    # 3. Log in to Docker Hub
    # ────────────────────────────────
    - name: Docker Hub – Login
      run: |
        # Use Docker Hub username and token from GitHub Secrets for authentication
        echo "${{ secrets.DOCKERHUB_TOKEN }}" \
          | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    # ────────────────────────────────
    # 4. Build Docker image and push both :<SHA> and :latest tags
    # ────────────────────────────────
    - name: Build & Push Docker Image
      env:
        TAG: ${{ github.sha }} # Use the Git commit SHA as a unique image tag
      run: |
        # Build the Docker image from the current directory (where Dockerfile is located)
        # Assigns both the SHA tag and the 'latest' tag
        docker build \
          -t $DOCKERHUB_REPO:$TAG \
          -t $DOCKERHUB_REPO:latest \
          . 

        # Push both tagged images to Docker Hub
        docker push $DOCKERHUB_REPO:$TAG
        docker push $DOCKERHUB_REPO:latest

        # Expose the immutable SHA tag to subsequent steps in the workflow
        echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

    # ────────────────────────────────
    # 5. Install Railway CLI (skipped if DRY_RUN is 'true')
    # ────────────────────────────────
    - name: Install Railway CLI
      if: env.DRY_RUN == 'false' # This step only runs if DRY_RUN is 'false'
      run: |
        # Install the official Railway Command Line Interface using npm
        npm install -g @railway/cli

    # ────────────────────────────────
    # 6. Deploy to Railway (skipped if DRY_RUN is 'true')
    # Authentication is handled via the RAILWAY_TOKEN environment variable
    # ────────────────────────────────
    - name: Deploy to Railway
      if: env.DRY_RUN == 'false' # This step only runs if DRY_RUN is 'false'
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }} # Pass the Railway API token as an environment variable
      run: |
        # First, set the Railway project and service context for subsequent commands
        echo "Setting Railway context for Project: ${{ env.RAILWAY_PROJECT }}, Service: ${{ env.RAILWAY_SERVICE }}"
        railway use --project ${{ env.RAILWAY_PROJECT }} --service ${{ env.RAILWAY_SERVICE }}

        # Then, deploy the Docker image to the established context
        # Uses the specific SHA-tagged image for deployment
        echo "Deploying image: ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG }}"
        railway deploy --image ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG }}
